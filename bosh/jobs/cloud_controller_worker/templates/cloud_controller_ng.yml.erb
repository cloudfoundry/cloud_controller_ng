<%
  require 'uri'
  
  def discover_external_ip
    networks = spec.networks.marshal_dump
    network = networks.values.detect(&:default) || networks.values.first
    raise "Could not determine IP via network spec: #{networks}" unless network
    network.ip
  end
%>
---
#Actually NGX host and port
local_route: <%= discover_external_ip %>
external_port: <%= p("cc.external_port") %>
tls_port: <%= p("cc.tls_port") %>
internal_service_hostname: <%= p("cc.internal_service_hostname") %>

newrelic_enabled: <%= !!properties.cc.newrelic.license_key %>
development_mode: <%= p("cc.development_mode") %>

external_protocol: <%= p("cc.external_protocol") %>
external_domain: <%= p("cc.external_host") %>.<%= p("system_domain") %>

jobs:
  global:
    timeout_in_seconds: <%= p("cc.jobs.global.timeout_in_seconds") %>
  <% if_p("cc.jobs.blobstore_delete.timeout_in_seconds") do |timeout| %>
  blobstore_delete:
    timeout_in_seconds: <%= timeout %>
  <% end %>

default_app_memory: <%= p("cc.default_app_memory") %>
default_app_disk_in_mb: <%= p("cc.default_app_disk_in_mb") %>
maximum_app_disk_in_mb: <%= p("cc.maximum_app_disk_in_mb") %>

instance_file_descriptor_limit: <%= p("cc.instance_file_descriptor_limit") %>

internal_api:
  auth_user: <%= p("cc.internal_api_user") %>
  auth_password: "<%= p("cc.internal_api_password") %>"

nginx:
  use_nginx: true
  instance_socket: "/var/vcap/sys/run/cloud_controller_worker/cloud_controller.sock"

index: <%= spec.index %>
name: <%= name %>

logging:
  file: /var/vcap/sys/log/cloud_controller_worker/cloud_controller_worker.log
  syslog: vcap.cloud_controller_ng
  level: <%= p("cc.logging_level") %>
  max_retries: <%= p("cc.logging_max_retries") %>

loggregator:
  router: <%= p("metron_endpoint.host") %>:<%= p("metron_endpoint.port") %>

<% db = p("ccdb.databases").find { |db| db["tag"] == "cc" } %>
<% db_role = p("ccdb.roles").find { |role| role["tag"] == "admin" } %>
<%
  database_address = nil
  if_p('ccdb.address') do |host|
    database_address = host
  end.else do
    database_address = link('database').instances[0].address
  end
%>
db: &db
  database: "<%= p("ccdb.db_scheme") == "mysql" ? "mysql2" : p("ccdb.db_scheme") %>://<%= db_role["name"] %>:<%= URI.escape(db_role["password"]) %>@<%= database_address %>:<%= p("ccdb.port") %>/<%= db["name"] %>"
  max_connections: <%= p("ccdb.max_connections") %>
  pool_timeout: <%= p("ccdb.pool_timeout") %>
  log_level: <%= p("cc.db_logging_level") %>
  ssl_verify_hostname: <%= p("ccdb.ssl_verify_hostname") %>
  <% if_p("ccdb.ca_cert") do %>
  ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/db_ca.crt"
  <% end %>

<% system_domain = p("system_domain") %>

uaa:
  internal_url: <%= "https://#{p("cc.uaa.internal_url")}:#{p("uaa.ssl.port")}" %>
  ca_file: /var/vcap/jobs/cloud_controller_worker/config/certs/uaa_ca.crt

# App staging parameters
staging:
  timeout_in_seconds: <%= p("cc.staging_timeout_in_seconds") %>
  auth:
    user: <%= p("cc.staging_upload_user") %>
    password: "<%= p("cc.staging_upload_password") %>"

default_health_check_timeout: <%= p("cc.default_health_check_timeout") %>

runtimes_file: /var/vcap/jobs/cloud_controller_worker/config/runtimes.yml

resource_pool:
  blobstore_type: <%= p("cc.resource_pool.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.resource_pool.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.resource_pool.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.resource_pool.webdav_config.private_endpoint") %>
    username: <%= p("cc.resource_pool.webdav_config.username") %>
    password: <%= p("cc.resource_pool.webdav_config.password") %>
    <% if p("cc.resource_pool.webdav_config.ca_cert") != "" && p("cc.resource_pool.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/resource_pool_ca_cert.pem"
    <% end %>
  minimum_size: <%= p("cc.resource_pool.minimum_size") %>
  maximum_size: <%= p("cc.resource_pool.maximum_size") %>
  resource_directory_key: <%= p("cc.resource_pool.resource_directory_key") %>
  <% if_p("cc.resource_pool.cdn") do %>
  cdn:
    uri: <%= p("cc.resource_pool.cdn.uri") %>
    key_pair_id: <%= p("cc.resource_pool.cdn.key_pair_id") %>
    private_key: <%= p("cc.resource_pool.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.resource_pool.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.resource_pool.fog_aws_storage_options", {}).to_json %>

packages:
  blobstore_type: <%= p("cc.packages.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.packages.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.packages.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.packages.webdav_config.private_endpoint") %>
    username: <%= p("cc.packages.webdav_config.username") %>
    password: <%= p("cc.packages.webdav_config.password") %>
    <% if p("cc.packages.webdav_config.ca_cert") != "" && p("cc.packages.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/packages_ca_cert.pem"
    <% end %>
  app_package_directory_key: <%= p("cc.packages.app_package_directory_key") %>
  max_package_size: <%= p("cc.packages.max_package_size") %>
  <% if_p("cc.packages.cdn") do %>
  cdn:
    uri: <%= p("cc.packages.cdn.uri") %>
    key_pair_id: <%= p("cc.packages.cdn.key_pair_id") %>
    private_key: <%= p("cc.packages.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.packages.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.packages.fog_aws_storage_options", {}).to_json %>

droplets:
  blobstore_type: <%= p("cc.droplets.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.droplets.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.droplets.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.droplets.webdav_config.private_endpoint") %>
    username: <%= p("cc.droplets.webdav_config.username") %>
    password: <%= p("cc.droplets.webdav_config.password") %>
    <% if p("cc.droplets.webdav_config.ca_cert") != "" && p("cc.droplets.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/droplets_ca_cert.pem"
    <% end %>
  droplet_directory_key: <%= p("cc.droplets.droplet_directory_key") %>
  <% if_p("cc.droplets.cdn") do %>
  cdn:
    uri: <%= p("cc.droplets.cdn.uri") %>
    key_pair_id: <%= p("cc.droplets.cdn.key_pair_id") %>
    private_key: <%= p("cc.droplets.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.droplets.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.droplets.fog_aws_storage_options", {}).to_json %>

buildpacks:
  blobstore_type: <%= p("cc.buildpacks.blobstore_type") %>
  webdav_config:
    blobstore_timeout: <%= p("cc.buildpacks.webdav_config.blobstore_timeout") %>
    public_endpoint: <%= p("cc.buildpacks.webdav_config.public_endpoint") %>
    private_endpoint: <%= p("cc.buildpacks.webdav_config.private_endpoint") %>
    username: <%= p("cc.buildpacks.webdav_config.username") %>
    password: <%= p("cc.buildpacks.webdav_config.password") %>
    <% if p("cc.buildpacks.webdav_config.ca_cert") != "" && p("cc.buildpacks.webdav_config.ca_cert") != nil %>
    ca_cert_path: "/var/vcap/jobs/cloud_controller_worker/config/certs/buildpacks_ca_cert.pem"
    <% end %>
  buildpack_directory_key: <%= p("cc.buildpacks.buildpack_directory_key") %>
  <% if_p("cc.buildpacks.cdn") do %>
  cdn:
    uri: <%= p("cc.buildpacks.cdn.uri") %>
    key_pair_id: <%= p("cc.buildpacks.cdn.key_pair_id") %>
    private_key: <%= p("cc.buildpacks.cdn.private_key").inspect %>
  <% end %>
  fog_connection: <%= p("cc.buildpacks.fog_connection", {}).to_json %>
  fog_aws_storage_options: <%= p("cc.buildpacks.fog_aws_storage_options", {}).to_json %>

db_encryption_key: <%= p("cc.db_encryption_key") %>

<% if_p("cc.database_encryption_keys") do %>
database_encryption_keys:
  keys: <%= p("cc.database_encryption_keys.keys") %>
  current_key_label: <%= p("cc.database_encryption_keys.current_key_label").inspect %>
<% end %>

broker_client_timeout_seconds: <%= p("cc.broker_client_timeout_seconds") %>
broker_client_default_async_poll_interval_seconds: <%= p('cc.broker_client_default_async_poll_interval_seconds') %>
broker_client_max_async_poll_duration_minutes: <%= p('cc.broker_client_max_async_poll_duration_minutes') %>

<% if_p("uaa.clients.cc_service_broker_client.secret") do %>
uaa_client_name: "cc_service_broker_client"
uaa_client_secret: <%= p("uaa.clients.cc_service_broker_client.secret") %>
uaa_client_scope: <%= p("uaa.clients.cc_service_broker_client.scope") %>
<% end.else_if_p("uaa.clients.cc-service-dashboards.secret") do %>
uaa_client_name: "cc-service-dashboards"
uaa_client_secret: <%= p("uaa.clients.cc-service-dashboards.secret") %>
uaa_client_scope: <%= p("uaa.clients.cc-service-dashboards.scope") %>
<% end %>

allow_app_ssh_access: <%= p("cc.allow_app_ssh_access") %>
default_app_ssh_access: <%= p("cc.default_app_ssh_access") %>

skip_cert_verify: <%= p("ssl.skip_cert_verify") %>

bits_service:
  enabled: <%= p("cc.bits_service.enabled") %>
  public_endpoint: <%= p("cc.bits_service.public_endpoint") %>
  private_endpoint: <%= p("cc.bits_service.private_endpoint") %>
  username: <%= p("cc.bits_service.username") %>
  password: <%= p("cc.bits_service.password") %>

diego:
  temporary_local_staging: <%= p("cc.diego.temporary_local_staging") %>
  temporary_local_tasks: <%= p("cc.diego.temporary_local_tasks") %>
  temporary_local_apps: <%= p("cc.diego.temporary_local_apps") %>
  temporary_local_sync: <%= p("cc.diego.temporary_local_sync") %>
  temporary_local_tps: <%= p("cc.diego.temporary_local_tps") %>
  temporary_cc_uploader_mtls: <%= p("cc.diego.temporary_cc_uploader_mtls") %>
  temporary_droplet_download_mtls: <%= p("cc.diego.temporary_droplet_download_mtls") %>
  temporary_oci_buildpack_mode: <%= p("cc.diego.temporary_oci_buildpack_mode", nil) %>
  nsync_url: <%= p("cc.diego.nsync_url") %>
  stager_url: <%= p("cc.diego.stager_url") %>
  tps_url: <%= p("cc.diego.tps_url") %>
  file_server_url: <%= p("cc.diego.file_server_url") %>
  cc_uploader_url: <%= p("cc.diego.cc_uploader_url") %>
  use_privileged_containers_for_running: <%= p("cc.diego.use_privileged_containers_for_running") %>
  use_privileged_containers_for_staging: <%= p("cc.diego.use_privileged_containers_for_staging") %>
  lifecycle_bundles: <%= p("cc.diego.lifecycle_bundles").to_json %>
  bbs:
    url: <%= p("cc.diego.bbs.url") %>
    key_file: /var/vcap/jobs/cloud_controller_worker/config/certs/mutual_tls.key
    cert_file: /var/vcap/jobs/cloud_controller_worker/config/certs/mutual_tls.crt
    ca_file: /var/vcap/jobs/cloud_controller_worker/config/certs/mutual_tls_ca.crt
  pid_limit: <%= p("cc.diego.pid_limit") %>

<% if p("routing_api.enabled") %>
routing_api:
  url: <%= "https://api.#{system_domain}/routing" %>
  routing_client_name: "cc_routing"
  routing_client_secret: <%= p("uaa.clients.cc_routing.secret") %>
<% end %>

perform_blob_cleanup: <%= p("cc.perform_blob_cleanup") %>
