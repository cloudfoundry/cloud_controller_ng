<%
    # We do a lot of table formatting, so define it once up front.
    def message_table(klass, opts = {})
      output = ""
      fields = klass.fields

      name_width = fields.keys.max { |a, b| a.length <=> b.length }.length
      name_width = [20, name_width].max

      max_schema_key = fields.keys.max do |a, b|
        a_len = VCAP::RestAPI::Message.schema_doc(fields[a].schema).length
        b_len = VCAP::RestAPI::Message.schema_doc(fields[b].schema).length
        a_len <=> b_len
      end

      max_schema_width = 60
      max_schema_width = 50 if opts[:include_optional]
      schema_width = [max_schema_width,
                      VCAP::RestAPI::Message.schema_doc(fields[max_schema_key].schema).length].max

      header_str = "| %-#{name_width}s |"
      header_str.concat(" %-8s |") if opts[:include_optional]
      header_str.concat(" %-#{schema_width}s |\n")
      header_data = ["name", "notes", "schema"]
      header_data -= ["notes"] unless opts[:include_optional]

      output.concat header_str % header_data

      line_str = "| #{"-" * name_width} |"
      line_str.concat(" #{"-" * 8} |") if opts[:include_optional]
      line_str.concat " #{"-" * schema_width} |\n"

      output.concat line_str

      fields.each do |name, field|
        schema_doc = VCAP::RestAPI::Message.schema_doc(field.schema)
        schema_doc.gsub!("\n", "") if schema_doc

        doc_str = "| %-#{name_width}s |"
        doc_str.concat(" %-8s |") if opts[:include_optional]
        doc_str.concat(" %-#{schema_width}s |")
        doc_str.concat("\n")
        doc_data = [name, field.required ? "required" : "optional", schema_doc]
        doc_data -= ["required", "optional"] unless opts[:include_optional]
        output.concat doc_str % doc_data
      end

      output
    end
%>

<%= File.read(File.join(Docs.top_dir, "API_Overview.md")) %>

<% apis.each do |api| %>
## <%= api.class_basename %>


## CC Specific API

NOTE: Like the migrations and the models this is being fleshed out and should be reviewed for hierarchy and relationships only.

### LIST <%= api.class_basename %>s

Resource URL: `GET <%= api.path %>`

Returns a paginated response of <%= api.class_basename %>s.

#### Query Parameters

| Parameter              | Description                                                                      |
| ---------              | -----------                                                                      |
| limit                  | Maximum number of results to return.                                             |
| offset                 | Offset from which to start iteration.                                            |
| urls-only              | If 1, only return a list of urls; do not expand metadata or resource attributes |
| inline-relations-depth | 0 - don't inline any relations and return URLs.  Otherwise, inline to depth N.   |
<% if api.query_parameters %>
| q                      | Search/filter string of the form `<attribute-name>:<value>` |

The `q` query parameter may include the following `attribute-names`:
* <%= api.query_parameters.to_a.join("\n* ") %>
<% end %>

See the API Overview for a more detailed description of these parameters.

#### Response Format:

The response is in the standard v2 paginated response format, i.e.:

<%= message_table(VCAP::RestAPI::PaginatedResponse) %>

The schema for `:metadata` follows the v2 standard:

<%= message_table(VCAP::RestAPI::MetadataMessage) %>

The schema for the `:entity` hash for <%= api.class_basename %> is:

<%= message_table(api::ResponseMessage) %>



### CREATE <%= api.class_basename %>

Resource URL: `POST <%= api.path %>`

Creates a <%= api.class_basename %>.

#### Request Format:

<%= message_table(api::CreateMessage, :include_optional => true) %>

#### Response Format:

<%= message_table(VCAP::RestAPI::Response) %>

The schema for `:metadata` follows the v2 standard:

<%= message_table(VCAP::RestAPI::MetadataMessage) %>

The schema for the `:entity` hash for <%= api.class_basename %> is:

<%= message_table(api::ResponseMessage) %>




### UPDATE <%= api.class_basename %>

Resource URL: `PUT <%= api.path %>`

Updates a <%= api.class_basename %>.

<% if api.to_many_relationships %>
#### Query Parameters

| Parameter         | Description |
| ---------         | ----------- |
| collection-method | See below.  |

`collection-method` may take on the following values:
* `add` = merge any supplied ids with the relations that already exist.
* `replace` = any supplied ids replace their corresponding relations.
<% end %>

#### Request Format:

<%= message_table(api::UpdateMessage, :include_optional => true) %>

#### Response Format:

<%= message_table(VCAP::RestAPI::Response) %>

The schema for `:metadata` follows the v2 standard:

<%= message_table(VCAP::RestAPI::MetadataMessage) %>

The schema for the `:entity` hash for <%= api.class_basename %> is:

<%= message_table(api::ResponseMessage) %>



### GET <%= api.class_basename %>

Resource URL: `GET <%= api.path_id %>`

Reads a <%= api.class_basename %>.

#### Response Format:

<%= message_table(VCAP::RestAPI::Response) %>

The schema for `:metadata` follows the v2 standard:

<%= message_table(VCAP::RestAPI::MetadataMessage) %>

The schema for the `:entity` hash for <%= api.class_basename %> is:

<%= message_table(api::ResponseMessage) %>




### DELETE <%= api.class_basename %>

Resource URL: `DELETE <%= api.path_id %>`

Deletes a <%= api.class_basename %>.

#### Response Format:

None

<% # FIXME: Add the to_many relation operations %>

<% end %>
