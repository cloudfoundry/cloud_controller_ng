## Metadata

Metadata allows you to tag [API resources](#api-resource) with information that does not directly affect its functionality.

### Annotations

```
Example Resource with Annotations
```

```json
{
  "guid": "fd35633f-5c5c-4e4e-a5a9-0722c970a9d2",
  "created_at": "2016-03-18T23:26:46Z",
  "updated_at": "2016-10-17T20:00:42Z",
  "name": "api-server",
  "metadata": {
    "labels": {},
    "annotations": {
      "contacts": "Bill tel(1111111) email(bill@fixme), Bob tel(222222) pager(3333333#555) email(bob@fixme)"
    }
  },
  "links": {
    "self": {
      "href": "https://api.example.org/v3/apps/fd35633f-5c5c-4e4e-a5a9-0722c970a9d2"
    }
  }
}
```

Annotations are user-specified key-value pairs that are attached to [API resources](#api-resource). They do not affect the operation of Cloud Foundry. Annotations cannot be used in [filters](#filters).

When a service instance is being created, the service broker is sent the annotations of the service instance, and the space and organization in which the service instance reside.
When a service instance is being updated, the service broker is sent the annotations of the space and organization in which the service instance reside.
When a service binding is being created, the service broker is sent annotations of any associated app, and the space and organization in which the binding resides.
Only annotations with a prefix are sent.

Examples may include (but are not limited to):

- `"contact info": "bob@example.com jane@example.com"`
- `"library versions": "Spring: 5.1, Redis Client: a184098. yaml parser: 38"`
- `"git-sha": "d56fe0367554ae5e878e37ed6c5b9a82f5995512"`

#### Annotation keys

Annotation keys are made up of an (optional) prefix and name. If a prefix is present, it is separated from the name by a `/`.
Prefixes are DNS names intended to enable namespacing of annotation keys.

An annotation key `prefix` must adhere to the following restrictions:

* Length: 0-253 characters
* Allowed characters: a-z, A-Z, 0-9, `-`, and `.`; emojis cannot be used in keys
* DNS subdomain format (series of subdomain annotations separated by `.`)

An annotation key `name` must adhere to the following restrictions:

* Length: 1-63 characters
* Allowed characters: a-z, A-Z, 0-9, `-`, `_`, and `.`; emojis cannot be used in keys
* Must begin and end with an alphanumeric character

#### Annotation values

Annotation values must adhere to the following restrictions:

* Length: 0-5000 unicode characters

### Labels and selectors

```
Example Resource with Labels
```

```json
{
  "guid": "fd35633f-5c5c-4e4e-a5a9-0722c970a9d2",
  "created_at": "2016-03-18T23:26:46Z",
  "updated_at": "2016-10-17T20:00:42Z",
  "name": "api-server",
  "metadata": {
    "labels": {
      "environment": "production",
      "internet-facing": "false"
    },
    "annotations": {}
  },
  "links": {
    "self": {
      "href": "https://api.example.org/v3/apps/fd35633f-5c5c-4e4e-a5a9-0722c970a9d2"
    }
  }
}
```

Labels are user-specified key/value pairs that are attached to [API Resources](#api-resource).
They are queryable, identifying attributes of a resource, but they do not affect the operation of CloudFoundry.

For example, an app may be assigned a label with key `sensitive` and possible values `true` or `false`.

Users could then find all sensitive apps with a selector for `sensitive=true`, resulting in a response containing
only apps having the label key `sensitive` with a label value of `false`.

#### Labels

Labels allow users to apply identifying attributes to resources that are meaningful to the user, but not the CloudFoundry system.

Examples may include (but are not limited to):

- `"production" : "true"` or `"production" : "false"`
- `"env" : "dev"` or `"env" : "test"` or `"env" : "prod"`
- `"chargeback-code" : "abc123"`

##### Label keys

Label keys are made up of an (optional) prefix, and name. If a prefix is present, it is separated from the name by a `/`.
Prefixes are dns names intended to enable namespacing of label keys.

A label key `prefix` must adhere to the following restrictions:

* Length: 0-253 characters
* Allowed characters: alphanumeric ( \[a-z0-9A-Z\] ), `-`, and `.`
* DNS subdomain format (series of subdomain labels separated by `.`)

A label key `name` must adhere to the following restrictions:

* Length: 1-63 characters
* Allowed characters: alphanumeric ( \[a-z0-9A-Z\] ), `-`, `_`, and `.`
* Must begin and end with an alphanumeric character

##### Label values

Label values must adhere to the following restrictions:

* Length: 0-63 characters
* Allowed characters: alphanumeric ( \[a-z0-9A-Z\] ), `-`, `_`, and `.`
* Must begin and end with an alphanumeric character
* Empty values are allowed

#### Selectors

```
Example label selector
```

```bash
cf curl /v3/apps?label_selector=env=dev,%21chargeback-code,tier%20in%20%28backend,worker%29
```

Selectors allow users to filter and group API resources by the labels applied to them. A selector consists of one or
more `requirements` in a comma-delimited list.

_eg:_ `env=dev,!chargeback-code,tier in (backend,worker)`

Selectors can be used to filter and group resources using the query parameter `label_selector` on list endpoints.

<aside class="notice">
When included in a url, the selector must be appropriately escaped.
</aside>

A requirement consists of a _key_, an `operator`, and optional _value(s)_.

Requirement | Format | Description
----------- | ------ | -----------
existence     | _key_                                | Returns all resources that have been assigned a label with the given _key_ (with any _value_)
non-existence | `!`_key_                             | Returns all resources that have not been assigned a label with the given _key_ (with any _value_)
equality      | _key_`=`_value_ or _key_`==`_value_  | Returns all resources that have been assigned a label with the given _key_ and _value_
inequality    | _key_`!=`_value_                     | Returns all resources that either have not been assigned a label with the given _key_ or have a label with the given _key_ but a different _value_
set inclusion | _key_ `in` (_value1_,_value2_...)    | Returns all resources that have been assigned a label with the given _key_ with one of the specified _value(s)_
set exclusion | _key_ `notin` (_value1_,_value2_...) | Returns all resources that either have not been assigned a label with the given _key_ or have a label with the given _key_ but none of the specified _value(s)_

See [the metadata documentation](https://docs.cloudfoundry.org/adminguide/metadata.html#query) for more information.

### Updating labels and annotations

```
Example Initial Metadata
```

```json
{
  "metadata": {
    "labels": {
      "environment": "staging",
      "ready-to-deploy": "true"
    },
    "annotations": {
       "spring-version": "5.1",
       "app-version": "0.1-alpha"
     }
  }
}
```

```
Example Patch Request Body
```

```json
{
  "metadata": {
    "labels": {
      "environment": "production",
      "ready-to-deploy": null
    },
    "annotations": {
       "app-version": "0.1",
       "deployed-month": "november"
     }
  }
}
```

```
Example Final Metadata
```

```json
{
  "metadata": {
    "labels": {
      "environment": "production"
    },
    "annotations": {
       "spring-version": "5.1",
       "app-version": "0.1",
       "deployed-month": "november"
     }
  }
}
```

Labels and annotations can be updated by using the PATCH endpoint for their resource.
For example, to update labels or annotations on an app, use the [update an app](#update-an-app) endpoint.
When patching metadata, CAPI endpoints do a deep merge, only updating labels or annotations that are specified in the request.

Labels and annotations follow the same rules for patching and must be wrapped in the metadata object inside the request body

* To create, include the new key with a value
* To change, include the existing key with a new value
* To delete, include the existing key with a `null` value
* To remain unchanged, do not include the existing key.

